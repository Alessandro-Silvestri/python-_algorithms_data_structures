Time complexity: number of computations in worst scenario
Space complexity: memory deployed

Ω omega - best scenario (iteration through a list and stop at the first item)
Θ theta - average scenario (iteration through a list and stop in the middle)
Ο omicron - worst scenario the most important (iteration through a list and stop at the last item)

O(n) - worst scenario with as much computations as possible called also (proportional)

-----------------------------------------------------------------------------------
# example of O(n2) - a lot less efficient

def print_items(n):
    for i in range(n):
        for j in range(n):
            print(f"{i}{j}")

print_items(3)

-----------------------------------------------------------------------------------
# example DROP DOMINANT: here we have O(n2) + O(n) or O(n2 + n) the second loop is irrelevant
# so we can declare this algorithm as O(n2)

def print_items(n):
    for i in range(n):
        for j in range(n):
            print(f"{i}{j}")
    
    for k in range(n):
        print(k)

print_items(10)

-----------------------------------------------------------------------------------
# example O(1) so just one computation (the most efficient)

def add(n):
    return n+n

-----------------------------------------------------------------------------------
# example O(log n) in a list the items have to be sorted (very efficient):
[1, 2, 3, 4, 5, 6, 7]
the algorithm cuts the list in have until it achieve the item

-----------------------------------------------------------------------------------
# Big O lists: append or pop are O(1) because the index of the other items doesn't change
# insert or removing an item in the middle or in the beginning is O(n) because of
# the re indexing of the items
[1, 2, 3, 4, 5, 6, 7]

-----------------------------------------------------------------------------------
# GRAPHS
# Adjacency matrix
# In this case the connections are bidirectional

           A 
         /   \   
     E           B
     \           /
       D------- C

       A B C D E
     A 0 1 0 0 1
     B 0 0 1 0 0
     C 0 1 0 1 0
     D 0 0 1 0 1
     E 1 0 0 1 0

# Dictionary representation (more efficient because it doesn't need
# to store the zeros like in the matrix
# and also if you need to add a vertex you don't need to create
# a new row, a new column and fill the with zeros)
{
    'A':['B','E'],
    'B':['A','C'],
    'C':['B','D'],
    'D':['C','E'],
    'E':['A','D'],
}

-----------------------------------------------------------------------------------
# HEAPS

                    99
                  /    \
                72      61
              /   \    /   \
            58    55  27   18

List representation (very common to see the index starting from 1):
[99, 72, 61, 58, 55, 27, 18]
 1   2   3   4   5   6   7

Find the children given the parent index:
first son = index * 2
second son = index * 2 + 1

Find the parent given one of the 2 children:
son = index // 2

it's like the binary tree but they are different.
    - The tree is always complete and perfect
    - Max heap: the root is the highest number
    - Min heap: the root is the lowest number
    - All the other nodes are in descending order in vertical (no matter the horizontal order)
    - It doesn't need to create node classes
    - All the nodes are represented like a list
    - the list index starts from 1 for an easier calculation for finding the children and the parent
    - you can have duplicates